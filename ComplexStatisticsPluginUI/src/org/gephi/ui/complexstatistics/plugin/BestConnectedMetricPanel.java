/*
 * Copyright 2008-2012 Gephi
 * Authors : Cezary Bartosiak
 * Website : http://www.gephi.org
 *
 * This file is part of Gephi.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2012 Gephi Consortium. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 3 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://gephi.org/about/legal/license-notice/
 * or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License files at
 * /cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 3, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 3] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 3 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 3 code and therefore, elected the GPL
 * Version 3 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Gephi Consortium.
 */
package org.gephi.ui.complexstatistics.plugin;

import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;

/**
 *
 *
 * @author Cezary Bartosiak
 */
public class BestConnectedMetricPanel extends javax.swing.JPanel {
    private AttributeLine[] attrLines;
	
	/** Creates new form BestConnectedMetricPanel */
    public BestConnectedMetricPanel() {
        initComponents();
    }

	public int getK() {
		return Integer.parseInt(kFormattedTextField.getText());
	}

	public void setK(int k) {
		kFormattedTextField.setText(k + "");
	}
	
	public double getEpsilon() {
		return Double.parseDouble(epsilonFormattedTextField.getText());
	}

	public void setEpsilon(double epsilon) {
		epsilonFormattedTextField.setText(epsilon + "");
	}
	
	public String getMetric() {
		if (attrLines != null)
			for (AttributeLine l : attrLines)
				if (l.isSelected())
					return l.getMetric();
		return null;
	}

	public void setMetric(String metric) {
		if (attrLines != null)
			for (AttributeLine l : attrLines)
				if (l.getMetric().equals(metric)) {
					metricsButtonGroup.setSelected(l.getRadioButton().getModel(), true);
					break;
				}
	}

	public void setMetrics(String[] metrics) {
		if (metrics != null) {
			attrLines = new AttributeLine[metrics.length];
			metricsButtonGroup = new ButtonGroup();
			
			contentPanel.removeAll();
			contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.PAGE_AXIS));
			for (int i = 0; i < metrics.length; i++) {
				AttributeLine l = new AttributeLine(metrics[i], metricsButtonGroup);
				attrLines[i] = l;
				contentPanel.add(l.getRadioButton());
			}
			contentPanel.revalidate();
			contentPanel.repaint();
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doNormButtonGroup = new javax.swing.ButtonGroup();
        metricsButtonGroup = new javax.swing.ButtonGroup();
        bestConnectedMetricHeader = new org.jdesktop.swingx.JXHeader();
        metricsLabel = new javax.swing.JLabel();
        contentScrollPane = new javax.swing.JScrollPane();
        contentPanel = new javax.swing.JPanel();
        kFormattedTextField = new javax.swing.JFormattedTextField();
        kLabel = new javax.swing.JLabel();
        epsilonFormattedTextField = new javax.swing.JFormattedTextField();
        epsilonLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(458, 373));

        bestConnectedMetricHeader.setDescription(org.openide.util.NbBundle.getMessage(BestConnectedMetricPanel.class, "BestConnectedMetricPanel.bestConnectedMetricHeader.description")); // NOI18N
        bestConnectedMetricHeader.setTitle(org.openide.util.NbBundle.getMessage(BestConnectedMetricPanel.class, "BestConnectedMetricPanel.bestConnectedMetricHeader.title")); // NOI18N

        metricsLabel.setText(org.openide.util.NbBundle.getMessage(BestConnectedMetricPanel.class, "BestConnectedMetricPanel.metricsLabel.text")); // NOI18N

        contentPanel.setLayout(new java.awt.GridLayout(1, 0));
        contentScrollPane.setViewportView(contentPanel);

        kFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        kLabel.setText(org.openide.util.NbBundle.getMessage(BestConnectedMetricPanel.class, "BestConnectedMetricPanel.kLabel.text")); // NOI18N

        epsilonFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));

        epsilonLabel.setText(org.openide.util.NbBundle.getMessage(BestConnectedMetricPanel.class, "BestConnectedMetricPanel.epsilonLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bestConnectedMetricHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(metricsLabel)
                .addContainerGap(602, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kLabel)
                    .addComponent(epsilonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(epsilonFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(534, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bestConnectedMetricHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kLabel)
                    .addComponent(kFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epsilonFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epsilonLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(metricsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHeader bestConnectedMetricHeader;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JScrollPane contentScrollPane;
    private javax.swing.ButtonGroup doNormButtonGroup;
    private javax.swing.JFormattedTextField epsilonFormattedTextField;
    private javax.swing.JLabel epsilonLabel;
    private javax.swing.JFormattedTextField kFormattedTextField;
    private javax.swing.JLabel kLabel;
    private javax.swing.ButtonGroup metricsButtonGroup;
    private javax.swing.JLabel metricsLabel;
    // End of variables declaration//GEN-END:variables

	private static class AttributeLine {
		private JRadioButton radioButton;
		private String metric;

		public AttributeLine(String metric, ButtonGroup metricsButtonGroup) {
			radioButton = new JRadioButton(metric, false);
			metricsButtonGroup.add(radioButton);
			this.metric = metric;
		}

		public JRadioButton getRadioButton() {
			return radioButton;
		}

		public boolean isSelected() {
			return radioButton.isSelected();
		}

		public String getMetric() {
			return metric;
		}
	}
}
